[
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "MTA Data Challenge",
    "section": "",
    "text": "This page shows all the code written to create the map .gif on the home page. Our methodology written in words can be found under the Methods tab.\n\n\nThese are the libraries needed to run the code.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(janitor)\n\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\nlibrary(sf)\n\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n\nlibrary(terra)\n\nterra 1.7.78\n\nAttaching package: 'terra'\n\nThe following object is masked from 'package:janitor':\n\n    crosstab\n\nThe following object is masked from 'package:tidyr':\n\n    extract\n\nlibrary(spData)\nlibrary(spDataLarge)\nlibrary(tmap)\n\n\nAttaching package: 'tmap'\n\nThe following object is masked from 'package:datasets':\n\n    rivers\n\nlibrary(leaflet)\nlibrary(knitr)\n\n\nAttaching package: 'knitr'\n\nThe following object is masked from 'package:terra':\n\n    spin\n\nlibrary(gganimate)\n\n\nAttaching package: 'gganimate'\n\nThe following object is masked from 'package:terra':\n\n    animate\n\nlibrary(lubridate)\n\n\n\n\nWe combine 4 data sets to create the points and lines on the final map. The first two datasets provide information on capital projects. We combine these two datasets so that we know the timeline, location, and type of each project. The second two datasets provides information on additional journey time (AJT) for each subway line for each month. These datasets are stratified by year (2015-2019) and 2020 on, so they need to be combined.\n\n# Loading data for the project locations\nlocation &lt;- read_csv(\"data/project_locations.csv\") %&gt;% clean_names()\n\n# Loading data for the project summaries, which show project progress\nsummary &lt;- read_csv(\"data/project_summary.csv\") %&gt;% \n  clean_names() %&gt;% \n  select(-c(\"agency_name\", \"category_description\", \n            \"element_description\", \"project_description\",\n            \"location_indicator\", \"capital_plan\"))\n\n# Joining the project location and progress data and simplifying the categories\nproject_data &lt;- location %&gt;% \n  left_join(summary, by = \"project_number\") %&gt;% \n  filter(current_quarter_flag == \"CQ\") %&gt;% \n  filter(agency_name == \"New York City Transit\") %&gt;% \n  mutate(category_description = \n           case_when(category_description %in% \n                       c(\"SIGNALS & COMMUNICATIONS\",\n                         \"SIGNALS AND COMMUNICATIONS\") ~ \n                       \"SIGNALS & COMMUNICATION\",\n                     category_description %in% c(\"MISC./EMERGENCY\", \"MISCELLANEOUS\")  ~ \n                       \"MISCELLANEOUS/EMERGENCY\",\n                     category_description %in% c(\"SHOPS AND YARDS\", \"YARDS\") ~\n                       \"SHOPS & YARDS\",\n                     category_description %in% c(\"TRACTION POWER\", \"POWER\") ~ \"POWER/TRACTION POWER\",\n                     TRUE ~ category_description)\n  ) %&gt;% \n  filter(!category_description %in% c(\"DEPOTS\", \n                                      \"BUSES\", \n                                      \"SHOPS & YARDS\"))\n\njourney_data1 &lt;- read_csv(\"data/journey_time.csv\")\njourney_data2 &lt;- read_csv(\"data/journey_time_2020.csv\")\n\njourney_data &lt;- rbind(journey_data1, journey_data2) %&gt;% \n  filter(period == \"peak\") %&gt;% \n  select(-period) %&gt;% \n  filter(line != \"Systemwide\") %&gt;% \n  mutate(line = case_when(line %in% c(\"S Fkln\", \"S Rock\", \"S 42nd\") ~ \"S\",\n                          line == \"JZ\" ~ \"J-Z\",\n                          TRUE ~ line)) %&gt;% \n  mutate(ajt = total_apt + total_att) %&gt;% \n  select(month, line, ajt) %&gt;% \n  mutate(month = as.character(month))\n\nNow we have two datasets: one for projects (circles on the map) and one for additional journey time per line (lines on the map). However, we have to do some data manipulation so that the datasets include entries for each project, the completion percentage of the project, each line, and each AJT amount for each month and each year. To do this, we write some for loops to add entries to the datasets.\n\n# Reformatting the date variable here to make the iteration easier\nproject_data &lt;- project_data %&gt;% \n  mutate(project_id = paste(project_number, project_number_sequence, sep = \"\")) %&gt;%\n  filter(!is.na(current_start_year), !is.na(current_completion_year)) %&gt;% \n  mutate(current_start_month = if_else(is.na(current_start_month), \n                                       01, \n                                       current_start_month),\n         current_completion_month = if_else(is.na(current_completion_month),\n                                            01,\n                                            current_completion_month)) %&gt;% \n  mutate(start_date = as.Date(paste(current_start_year, \n                                           current_start_month, \n                                           01,\n                                           sep = \"-\"), \"%Y-%m-%d\")) %&gt;% \n  mutate(end_date = as.Date(paste(current_completion_year, \n                                         current_completion_month, \n                                          01,\n                                  sep = \"-\"), \"%Y-%m-%d\")) %&gt;% \n  mutate(date = start_date,\n         project_left = 100) %&gt;% \n  # Start in 2015 because this is where the AJT data starts\n  filter(start_date &gt; \"2014-12-01\") %&gt;% \n  select(project_id, category_description, latitude, longitude, location,\n         start_date, end_date, date, project_left)\n\n# Begin the iteration to add rows to the dataset\nfor (i in unique(project_data$project_id)) {\n  curr_row_num &lt;- which(project_data$project_id == i)\n  curr_row &lt;- project_data[curr_row_num,]\n  # Get number of months the project is active\n  start &lt;- project_data$start_date[curr_row_num]\n  end &lt;- project_data$end_date[curr_row_num]\n  num_months &lt;- interval(start, end) %/% months(1)\n  if(num_months &gt; 0) {\n    rate &lt;- 100/num_months\n    for (j in 1:num_months) {\n      curr_row$date &lt;- start %m+% months(j)\n      curr_row$project_left &lt;- if_else(j == num_months,\n                                     0,\n                                     (num_months - j)*rate)\n      project_data[nrow(project_data) + 1,] = curr_row\n    }\n  }\n}\n\ndates &lt;- as.character(seq(as.Date(\"2015-01-01\"), as.Date(\"2024-08-01\"), by=\"months\"))\n\ngrab_ajt &lt;- function(line_name, date) {\n  \n  ajt &lt;- journey_data %&gt;% \n    filter(month == date) %&gt;% \n    filter(line == line_name) %&gt;% \n    pull(ajt)\n  \n  if (length(ajt) == 0) {\n    ajt &lt;- 0\n  }\n  \n  return(ajt)\n}\n\nadd_new_row &lt;- function(line_combo, ajt_val) {\n  journey_data %&gt;% \n    add_row(month = date,\n            line = line_combo,\n            ajt = ajt_val)\n}\n\nfor (date in dates) {\n  \n  ajts &lt;- map(.x = list(B = \"B\", D = \"D\", FF = \"F\", M = \"M\", N = \"N\", Q = \"Q\", \n                   R = \"R\", A = \"A\", C = \"C\", W = \"W\", E = \"E\", l1 = \"1\",\n                   l2 = \"2\", l3 = \"3\", l4 = \"4\", l5 = \"5\", l6 = \"6\"), \n              .f = grab_ajt,\n              date)\n  \n  journey_data &lt;- add_new_row(\"B-D\", mean(ajts$B, ajts$D))\n  journey_data &lt;- add_new_row(\"B-D-F-M\", mean(ajts$B, ajts$D, ajts$FF, ajts$M)) \n  journey_data &lt;- add_new_row(\"N-Q-R\", mean(ajts$N, ajts$Q, ajts$R)) \n  journey_data &lt;- add_new_row(\"N-Q\", mean(ajts$N, ajts$Q)) \n  journey_data &lt;- add_new_row(\"N-R\", mean(ajts$N, ajts$R)) \n  journey_data &lt;- add_new_row(\"F-M\", mean(ajts$FF, ajts$M)) \n  journey_data &lt;- add_new_row(\"A-C\", mean(ajts$A, ajts$C)) \n  journey_data &lt;- add_new_row(\"1-2-3\", mean(ajts$l1, ajts$l2, ajts$l3)) \n  journey_data &lt;- add_new_row(\"4-5-6\", mean(ajts$l4, ajts$l5, ajts$l6)) \n  journey_data &lt;- add_new_row(\"N-W\", mean(ajts$N, ajts$W)) \n  journey_data &lt;- add_new_row(\"2-3\", mean(ajts$l2, ajts$l3)) \n  journey_data &lt;- add_new_row(\"4-5\", mean(ajts$l4, ajts$l5))\n  journey_data &lt;- add_new_row(\"A-C-E\", mean(ajts$A, ajts$C, ajts$E)) \n  journey_data &lt;- add_new_row(\"N-Q-R-W\", mean(ajts$N, ajts$Q, ajts$R, ajts$W)) \n  journey_data &lt;- add_new_row(\"N-R-W\", mean(ajts$N, ajts$R, ajts$W))\n  journey_data &lt;- add_new_row(\"R-W\", mean(ajts$R, ajts$W))\n}\n\nFinally, we use shape data to be able to map the subway lines and the location of the projects in NYC.\n\nlines &lt;- st_read(\"nyc_subways/lines.shp\")\n\nReading layer `lines' from data source \n  `/Users/safiyasirota/Desktop/research/mta_challenge/nyc_subways/lines.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 742 features and 6 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: -74.03088 ymin: 40.57559 xmax: -73.75541 ymax: 40.90312\nGeodetic CRS:  WGS84(DD)\n\n# We exclude Staten Island since there are no subway data there\nnyc &lt;- st_read(\"nyc_base_map/nyc.shp\") %&gt;% \n  filter(boro_name != \"Staten Island\")\n\nReading layer `nyc' from data source \n  `/Users/safiyasirota/Desktop/research/mta_challenge/nyc_base_map/nyc.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -74.25559 ymin: 40.49613 xmax: -73.70001 ymax: 40.91553\nGeodetic CRS:  WGS84(DD)\n\n# Turn the project data into a form that can be mapped\nproj_locs &lt;- st_as_sf(project_data, coords = c(\"longitude\", \"latitude\"), \n                      crs = 4326, agr = \"constant\") %&gt;% \n  filter(date &lt;= \"2024-08-01\") %&gt;% \n  mutate(date = as.factor(date))\n\n# Combine the AJT data with the geography of the lines so it can be mapped\nline_data &lt;- lines %&gt;% \n  rename(line = name) %&gt;% \n  select(-c(url, id, objectid, rt_symbol)) %&gt;% \n  left_join(journey_data, by = \"line\") %&gt;%\n  rename(date = month) %&gt;% \n  mutate(date = as.factor(date))\n\n\n\n\nNow we use the tmap package to create the final map.\n\n# Making sure our final .gif includes all the frames\ntmap_options(facet.max = 200)\n\n# Create the map\nurb_anim &lt;- tm_shape(nyc) + \n  tm_polygons(fill = \"white\") + \n  tm_shape(line_data) +\n  tm_lines(col = \"ajt\", lwd = 3.5, palette = \"heat\" ) +\n  tm_scale_intervals(style = \"pretty\") +\n  tm_facets_wrap(by = \"date\",\n                 nrow = 1, ncol = 1) +\n  tm_shape(proj_locs) + \n  tm_symbols(fill = \"category_description\", size = \"project_left\",\n             fill_alpha = 0.5, col_alpha = 0) +\n  tm_polygons() + \n  tm_facets_wrap(by = \"date\",\n                 nrow = 1, ncol = 1)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `lines()`: migrate the argument(s) related to the scale of the visual\nvariable `col` namely 'palette' (rename to 'values') to col.scale =\ntm_scale(&lt;HERE&gt;).\n\ntmap_animation(urb_anim, filename = \"urb_anim.gif\", delay = 20)\n\nCreating frames\n\n\nWarning in sf::st_is_longlat(shp): bounding box has potentially an invalid\nvalue range for longlat data\n\n\nWarning in st_is_longlat(x): bounding box has potentially an invalid value\nrange for longlat data\nWarning in st_is_longlat(x): bounding box has potentially an invalid value\nrange for longlat data\nWarning in st_is_longlat(x): bounding box has potentially an invalid value\nrange for longlat data\n\n\nWarning in sf::st_is_longlat(shp): bounding box has potentially an invalid\nvalue range for longlat data\n\n\nWarning in st_is_longlat(x): bounding box has potentially an invalid value\nrange for longlat data\nWarning in st_is_longlat(x): bounding box has potentially an invalid value\nrange for longlat data\nWarning in st_is_longlat(x): bounding box has potentially an invalid value\nrange for longlat data\n\n\n\nCreating animation\nAnimation saved to /Users/safiyasirota/Desktop/research/mta_challenge/urb_anim.gif"
  },
  {
    "objectID": "eda.html#loading-libraries",
    "href": "eda.html#loading-libraries",
    "title": "MTA Data Challenge",
    "section": "Loading libraries",
    "text": "Loading libraries\nThese are the libraries needed to run the code.\n\n\nCode\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(sf)\nlibrary(terra)\nlibrary(spData)\nlibrary(spDataLarge)\nlibrary(tmap)\nlibrary(leaflet)\nlibrary(knitr)\nlibrary(gganimate)\nlibrary(lubridate)"
  },
  {
    "objectID": "eda.html#loading-data",
    "href": "eda.html#loading-data",
    "title": "MTA Data Challenge",
    "section": "Loading data",
    "text": "Loading data\nWe combine 4 data sets to create the points and lines on the final map. The first two datasets provide information on capital projects. We combine these two datasets so that we know the timeline, location, and type of each project. The second two datasets provides information on additional journey time (AJT) for each subway line for each month. These datasets are stratified by year (2015-2019) and 2020 on, so they need to be combined.\n\n\nCode\n# Loading data for the project locations\nlocation &lt;- read_csv(\"data/project_locations.csv\") %&gt;% clean_names()\n\n# Loading data for the project summaries, which show project progress\nsummary &lt;- read_csv(\"data/project_summary.csv\") %&gt;% \n  clean_names() %&gt;% \n  select(-c(\"agency_name\", \"category_description\", \n            \"element_description\", \"project_description\",\n            \"location_indicator\", \"capital_plan\"))\n\n# Joining the project location and progress data and simplifying the categories\nproject_data &lt;- location %&gt;% \n  left_join(summary, by = \"project_number\") %&gt;% \n  filter(current_quarter_flag == \"CQ\") %&gt;% \n  filter(agency_name == \"New York City Transit\") %&gt;% \n  mutate(category_description = \n           case_when(category_description %in% \n                       c(\"SIGNALS & COMMUNICATIONS\",\n                         \"SIGNALS AND COMMUNICATIONS\") ~ \n                       \"SIGNALS & COMMUNICATION\",\n                     category_description %in% c(\"MISC./EMERGENCY\", \"MISCELLANEOUS\")  ~ \n                       \"MISCELLANEOUS/EMERGENCY\",\n                     category_description %in% c(\"SHOPS AND YARDS\", \"YARDS\") ~\n                       \"SHOPS & YARDS\",\n                     category_description %in% c(\"TRACTION POWER\", \"POWER\") ~ \"POWER/TRACTION POWER\",\n                     TRUE ~ category_description)\n  ) %&gt;% \n  filter(!category_description %in% c(\"DEPOTS\", \n                                      \"BUSES\", \n                                      \"SHOPS & YARDS\"))\n\njourney_data1 &lt;- read_csv(\"data/journey_time.csv\")\njourney_data2 &lt;- read_csv(\"data/journey_time_2020.csv\")\n\njourney_data &lt;- rbind(journey_data1, journey_data2) %&gt;% \n  filter(period == \"peak\") %&gt;% \n  select(-period) %&gt;% \n  filter(line != \"Systemwide\") %&gt;% \n  mutate(line = case_when(line %in% c(\"S Fkln\", \"S Rock\", \"S 42nd\") ~ \"S\",\n                          line == \"JZ\" ~ \"J-Z\",\n                          TRUE ~ line)) %&gt;% \n  mutate(ajt = total_apt + total_att) %&gt;% \n  select(month, line, ajt) %&gt;% \n  mutate(month = as.character(month))\n\n\nNow we have two datasets: one for projects (circles on the map) and one for additional journey time per line (lines on the map). However, we have to do some data manipulation so that the datasets include entries for each project, the completion percentage of the project, each line, and each AJT amount for each month and each year. To do this, we write some for loops to add entries to the datasets.\n\n\nCode\n# Reformatting the date variable here to make the iteration easier\nproject_data &lt;- project_data %&gt;% \n  mutate(project_id = paste(project_number, project_number_sequence, sep = \"\")) %&gt;%\n  filter(!is.na(current_start_year), !is.na(current_completion_year)) %&gt;% \n  mutate(current_start_month = if_else(is.na(current_start_month), \n                                       01, \n                                       current_start_month),\n         current_completion_month = if_else(is.na(current_completion_month),\n                                            01,\n                                            current_completion_month)) %&gt;% \n  mutate(start_date = as.Date(paste(current_start_year, \n                                           current_start_month, \n                                           01,\n                                           sep = \"-\"), \"%Y-%m-%d\")) %&gt;% \n  mutate(end_date = as.Date(paste(current_completion_year, \n                                         current_completion_month, \n                                          01,\n                                  sep = \"-\"), \"%Y-%m-%d\")) %&gt;% \n  mutate(date = start_date,\n         project_left = 100) %&gt;% \n  # Start in 2015 because this is where the AJT data starts\n  filter(start_date &gt; \"2014-12-01\") %&gt;% \n  select(project_id, category_description, latitude, longitude, location,\n         start_date, end_date, date, project_left)\n\n# Begin the iteration to add rows to the dataset\nfor (i in unique(project_data$project_id)) {\n  curr_row_num &lt;- which(project_data$project_id == i)\n  curr_row &lt;- project_data[curr_row_num,]\n  # Get number of months the project is active\n  start &lt;- project_data$start_date[curr_row_num]\n  end &lt;- project_data$end_date[curr_row_num]\n  num_months &lt;- interval(start, end) %/% months(1)\n  if(num_months &gt; 0) {\n    rate &lt;- 100/num_months\n    for (j in 1:num_months) {\n      curr_row$date &lt;- start %m+% months(j)\n      curr_row$project_left &lt;- if_else(j == num_months,\n                                     0,\n                                     (num_months - j)*rate)\n      project_data[nrow(project_data) + 1,] = curr_row\n    }\n  }\n}\n\ndates &lt;- as.character(seq(as.Date(\"2015-01-01\"), as.Date(\"2024-08-01\"), by=\"months\"))\n\ngrab_ajt &lt;- function(line_name, date) {\n  \n  ajt &lt;- journey_data %&gt;% \n    filter(month == date) %&gt;% \n    filter(line == line_name) %&gt;% \n    pull(ajt)\n  \n  if (length(ajt) == 0) {\n    ajt &lt;- 0\n  }\n  \n  return(ajt)\n}\n\nadd_new_row &lt;- function(line_combo, ajt_val) {\n  journey_data %&gt;% \n    add_row(month = date,\n            line = line_combo,\n            ajt = ajt_val)\n}\n\nfor (date in dates) {\n  \n  ajts &lt;- map(.x = list(B = \"B\", D = \"D\", FF = \"F\", M = \"M\", N = \"N\", Q = \"Q\", \n                   R = \"R\", A = \"A\", C = \"C\", W = \"W\", E = \"E\", l1 = \"1\",\n                   l2 = \"2\", l3 = \"3\", l4 = \"4\", l5 = \"5\", l6 = \"6\"), \n              .f = grab_ajt,\n              date)\n  \n  journey_data &lt;- add_new_row(\"B-D\", mean(ajts$B, ajts$D))\n  journey_data &lt;- add_new_row(\"B-D-F-M\", mean(ajts$B, ajts$D, ajts$FF, ajts$M)) \n  journey_data &lt;- add_new_row(\"N-Q-R\", mean(ajts$N, ajts$Q, ajts$R)) \n  journey_data &lt;- add_new_row(\"N-Q\", mean(ajts$N, ajts$Q)) \n  journey_data &lt;- add_new_row(\"N-R\", mean(ajts$N, ajts$R)) \n  journey_data &lt;- add_new_row(\"F-M\", mean(ajts$FF, ajts$M)) \n  journey_data &lt;- add_new_row(\"A-C\", mean(ajts$A, ajts$C)) \n  journey_data &lt;- add_new_row(\"1-2-3\", mean(ajts$l1, ajts$l2, ajts$l3)) \n  journey_data &lt;- add_new_row(\"4-5-6\", mean(ajts$l4, ajts$l5, ajts$l6)) \n  journey_data &lt;- add_new_row(\"N-W\", mean(ajts$N, ajts$W)) \n  journey_data &lt;- add_new_row(\"2-3\", mean(ajts$l2, ajts$l3)) \n  journey_data &lt;- add_new_row(\"4-5\", mean(ajts$l4, ajts$l5))\n  journey_data &lt;- add_new_row(\"A-C-E\", mean(ajts$A, ajts$C, ajts$E)) \n  journey_data &lt;- add_new_row(\"N-Q-R-W\", mean(ajts$N, ajts$Q, ajts$R, ajts$W)) \n  journey_data &lt;- add_new_row(\"N-R-W\", mean(ajts$N, ajts$R, ajts$W))\n  journey_data &lt;- add_new_row(\"R-W\", mean(ajts$R, ajts$W))\n}\n\n\nFinally, we use shape data to be able to map the subway lines and the location of the projects in NYC.\n\n\nCode\nlines &lt;- st_read(\"nyc_subways/lines.shp\")\n\n\nReading layer `lines' from data source \n  `/Users/safiyasirota/Desktop/research/mta_challenge/nyc_subways/lines.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 742 features and 6 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: -74.03088 ymin: 40.57559 xmax: -73.75541 ymax: 40.90312\nGeodetic CRS:  WGS84(DD)\n\n\nCode\n# We exclude Staten Island since there are no subway data there\nnyc &lt;- st_read(\"nyc_base_map/nyc.shp\") %&gt;% \n  filter(boro_name != \"Staten Island\")\n\n\nReading layer `nyc' from data source \n  `/Users/safiyasirota/Desktop/research/mta_challenge/nyc_base_map/nyc.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -74.25559 ymin: 40.49613 xmax: -73.70001 ymax: 40.91553\nGeodetic CRS:  WGS84(DD)\n\n\nCode\n# Turn the project data into a form that can be mapped\nproj_locs &lt;- st_as_sf(project_data, coords = c(\"longitude\", \"latitude\"), \n                      crs = 4326, agr = \"constant\") %&gt;% \n  filter(date &lt;= \"2024-08-01\") %&gt;% \n  mutate(date = as.factor(date))\n\n# Combine the AJT data with the geography of the lines so it can be mapped\nline_data &lt;- lines %&gt;% \n  rename(line = name) %&gt;% \n  select(-c(url, id, objectid, rt_symbol)) %&gt;% \n  left_join(journey_data, by = \"line\") %&gt;%\n  rename(date = month) %&gt;% \n  mutate(date = as.factor(date))"
  },
  {
    "objectID": "eda.html#mapping",
    "href": "eda.html#mapping",
    "title": "MTA Data Challenge",
    "section": "Mapping",
    "text": "Mapping\nNow we use the tmap package to create the final map.\n\n\nCode\n# Making sure our final .gif includes all the frames\ntmap_options(facet.max = 200)\n\n# Create the map\nurb_anim &lt;- tm_shape(nyc) + \n  tm_polygons(fill = \"white\") + \n  tm_shape(line_data) +\n  tm_lines(col = \"ajt\", lwd = 3.5, palette = \"heat\" ) +\n  tm_scale_intervals(style = \"pretty\") +\n  tm_facets_wrap(by = \"date\",\n                 nrow = 1, ncol = 1) +\n  tm_shape(proj_locs) + \n  tm_symbols(fill = \"category_description\", size = \"project_left\",\n             fill_alpha = 0.5, col_alpha = 0) +\n  tm_polygons() + \n  tm_facets_wrap(by = \"date\",\n                 nrow = 1, ncol = 1)\n\ntmap_animation(urb_anim, filename = \"urb_anim.gif\", delay = 30)\n\n\nCreating frames\n\n\n\nCreating animation\nAnimation saved to /Users/safiyasirota/Desktop/research/mta_challenge/urb_anim.gif"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MTA Data Challenge",
    "section": "",
    "text": "It’s undeniable that the New York City subway is a living, breathing organism, inextricable from its co-dependent human creators. We wanted to bring to life this entity in flux: a mechanical body requiring constant maintenance, navigating its predetermined course at varying speeds.\nThe subway runs all hours of the day–except for, that is, the continual closing of different sections for maintenance. The functioning of these “limbs” requires repair of its muscles and organs–be it trackwork, structural improvements, or the repair of its signaling & communications systems. Though incredibly inconvenient for its riders, it seems objectively logical that a body in constant motion needs recovery for sustained function. Does it ever get tired? Does it ever need rest?\nIn considering our transit system as a being requiring dedicated care for its continued success, we hope to invite empathy towards the system itself, for those who maintain it, and for our fellow riders–while the City works to advance the function and resilience of this critical service."
  }
]