[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A Body at Work",
    "section": "",
    "text": "It’s undeniable that the New York City subway is a living, breathing organism, inextricable from its co-dependent human creators. We wanted to bring to life this entity in flux: a mechanical body requiring constant maintenance, navigating its predetermined course at varying speeds.\nThe subway runs all hours of the day–except for, that is, the continual closing of different sections for maintenance. The functioning of these “limbs” requires repair of its muscles and organs–be it trackwork, structural improvements, or the repair of its signaling & communications systems. Though incredibly inconvenient for its riders, it seems objectively logical that a body in constant motion needs recovery for sustained function. Does it ever get tired? Does it ever need rest?\nIn considering our transit system as a being requiring dedicated care for its continued success, we hope to invite empathy towards the system itself, for those who maintain it, and for our fellow riders–while the City works to advance the function and resilience of this critical service.\n \n\n\n\n \nWe leveraged 6 datasets to create this map:\n\n\nMetropolitan Transportation Authority (MTA) Capital Dashboard Project Locations\n\n\nMetropolitan Transportation Authority (MTA) Capital Dashboard Agencies Summary - All Load Dates\n\n\nMTA Subway Customer Journey-Focused Metrics: 2015-2019\n\n\nMTA Subway Customer Journey-Focused Metrics: Beginning 2020\n\n\nSubway Lines | NYC Open Data\n\n\nBorough Boundaries | NYC Open Data"
  },
  {
    "objectID": "eda.html#loading-libraries",
    "href": "eda.html#loading-libraries",
    "title": "Code for Map Creation",
    "section": "Loading libraries",
    "text": "Loading libraries\nThese are the libraries needed to run the code.\n\n\nCode\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(sf)\nlibrary(terra)\nlibrary(spData)\nlibrary(spDataLarge)\nlibrary(tmap)\nlibrary(leaflet)\nlibrary(knitr)\nlibrary(lubridate)"
  },
  {
    "objectID": "eda.html#loading-data",
    "href": "eda.html#loading-data",
    "title": "Code for Map Creation",
    "section": "Loading data",
    "text": "Loading data\nWe combine 4 data sets to create the points and lines on the final map. The first two datasets (1 & 2 on the home page) provide information on capital (infrastructure investment) projects. We combine these two datasets so that we know the timeline, location, and type of each project (e.g., passenger station upgrades, signals & communication updates). Some types of projects are excluded if they don’t directly affect subway transport, and some categories are combined for simplicity.\nThe second two datasets (3 & 4 on the home page) provide information on additional journey time (AJT) for each subway line for each month. The AJT denotes the average additional time in minutes, over the scheduled time, that customers spend onboard and waiting for a train. These datasets are stratified by year. One contains data from 2015-2019, and the other from 2020 on, so they need to be combined.\n\n\nCode\n# Loading data for the project locations\nlocation &lt;- read_csv(\"data/project_locations.csv\") %&gt;% clean_names()\n\n# Loading data for the project summaries, which show project progress\nsummary &lt;- read_csv(\"data/project_summary.csv\") %&gt;% \n  clean_names() %&gt;% \n  select(-c(\"agency_name\", \"category_description\", \n            \"element_description\", \"project_description\",\n            \"location_indicator\", \"capital_plan\"))\n\n# Joining the project location and progress data and simplifying the categories\nproject_data &lt;- location %&gt;% \n  left_join(summary, by = \"project_number\") %&gt;% \n  filter(current_quarter_flag == \"CQ\") %&gt;% \n  filter(agency_name == \"New York City Transit\") %&gt;% \n  mutate(category_description = \n           case_when(category_description %in% \n                       c(\"SIGNALS & COMMUNICATIONS\",\n                         \"SIGNALS AND COMMUNICATIONS\") ~ \n                       \"SIGNALS & COMMUNICATION\",\n                     category_description %in% c(\"MISC./EMERGENCY\", \"MISCELLANEOUS\")  ~ \n                       \"MISCELLANEOUS/EMERGENCY\",\n                     category_description %in% c(\"SHOPS AND YARDS\", \"YARDS\") ~\n                       \"SHOPS & YARDS\",\n                     category_description %in% c(\"TRACTION POWER\", \"POWER\") ~ \"POWER/TRACTION POWER\",\n                     TRUE ~ category_description)\n  ) %&gt;% \n  filter(!category_description %in% c(\"DEPOTS\", \n                                      \"BUSES\", \n                                      \"SHOPS & YARDS\"))\n\n# Loading the journey data from all years\njourney_data1 &lt;- read_csv(\"data/journey_time.csv\")\njourney_data2 &lt;- read_csv(\"data/journey_time_2020.csv\")\n\n# Combining the journey data and simplifying to later join with geographic data\njourney_data &lt;- rbind(journey_data1, journey_data2) %&gt;% \n  clean_names() %&gt;% \n  filter(period == \"peak\") %&gt;% \n  select(-period) %&gt;% \n  filter(line != \"Systemwide\") %&gt;% \n  mutate(line = case_when(line %in% c(\"S Fkln\", \"S Rock\", \"S 42nd\") ~ \"S\",\n                          line == \"JZ\" ~ \"J-Z\",\n                          TRUE ~ line)) %&gt;% \n  mutate(ajt = additional_platform_time + additional_train_time) %&gt;% \n  select(month, line, ajt) %&gt;% \n  mutate(month = as.character(month))\n\n\nNow we have two datasets: one for projects (circles on the map) and one for AJT per line (lines on the map). However, we have to do some data manipulation.\nFor the projects dataset, we have to edit it so that it includes entries for each project for each year and month, along with the completion percentage of the project, which we estimate to be linear over time from the start date to the end date listed in the dataset.\nFor the AJT dataset, we already have an entry for each line for each month of the year, but in order to mesh it properly with the geographical data, we have to make sure the line names correspond, and therefore have to average some data over multiple lines. For example, the geographical dataset for the subway lines has an “A-C-E” entry, while the AJT dataset only has data on the individual A, C, and E lines. Therefore the “line” on the map that represents the A-C-E is an average of the AJT for each individual line.\nThe methods to complete both of these tasks are shown in the code chunk below.\n\n\nCode\n# Reformatting the date variable here to make the iteration easier\nproject_data &lt;- project_data %&gt;% \n  mutate(project_id = paste(project_number, project_number_sequence, sep = \"\")) %&gt;%\n  filter(!is.na(current_start_year), !is.na(current_completion_year)) %&gt;% \n  mutate(current_start_month = if_else(is.na(current_start_month), \n                                       01, \n                                       current_start_month),\n         current_completion_month = if_else(is.na(current_completion_month),\n                                            01,\n                                            current_completion_month)) %&gt;% \n  mutate(start_date = as.Date(paste(current_start_year, \n                                           current_start_month, \n                                           01,\n                                           sep = \"-\"), \"%Y-%m-%d\")) %&gt;% \n  mutate(end_date = as.Date(paste(current_completion_year, \n                                         current_completion_month, \n                                          01,\n                                  sep = \"-\"), \"%Y-%m-%d\")) %&gt;% \n  mutate(date = start_date,\n         project_left = 100) %&gt;% \n  # Starting in 2015 because this is where the AJT data starts\n  filter(start_date &gt; \"2014-12-01\") %&gt;% \n  select(project_id, category_description, latitude, longitude, location,\n         start_date, end_date, date, project_left)\n\n# Beginning the iteration to add the proper additional rows to the dataset\nfor (i in unique(project_data$project_id)) {\n  curr_row_num &lt;- which(project_data$project_id == i)\n  curr_row &lt;- project_data[curr_row_num,]\n  # Getting number of months the project is active\n  start &lt;- project_data$start_date[curr_row_num]\n  end &lt;- project_data$end_date[curr_row_num]\n  num_months &lt;- interval(start, end) %/% months(1)\n  # Adding extra rows for each month, with completetion % estimate\n  if(num_months &gt; 0) {\n    rate &lt;- 100/num_months\n    for (j in 1:num_months) {\n      curr_row$date &lt;- start %m+% months(j)\n      curr_row$project_left &lt;- if_else(j == num_months,\n                                     0,\n                                     (num_months - j)*rate)\n      project_data[nrow(project_data) + 1,] = curr_row\n    }\n  }\n}\n\n\ndates &lt;- as.character(seq(as.Date(\"2015-01-01\"), as.Date(\"2024-08-01\"), by=\"months\"))\n\n# Averaging out certain lines so AJT data corresponds to the line geo data\ngrab_ajt &lt;- function(line_name, date) {\n  \n  ajt &lt;- journey_data %&gt;% \n    filter(month == date) %&gt;% \n    filter(line == line_name) %&gt;% \n    pull(ajt)\n  \n  if (length(ajt) == 0) {\n    ajt &lt;- 0\n  }\n  \n  return(ajt)\n}\n\nadd_new_row &lt;- function(line_combo, ajt_val) {\n  journey_data %&gt;% \n    add_row(month = date,\n            line = line_combo,\n            ajt = ajt_val)\n}\n\nfor (date in dates) {\n  \n  ajts &lt;- map(.x = list(B = \"B\", D = \"D\", FF = \"F\", M = \"M\", N = \"N\", Q = \"Q\", \n                   R = \"R\", A = \"A\", C = \"C\", W = \"W\", E = \"E\", l1 = \"1\",\n                   l2 = \"2\", l3 = \"3\", l4 = \"4\", l5 = \"5\", l6 = \"6\"), \n              .f = grab_ajt,\n              date)\n  \n  journey_data &lt;- add_new_row(\"B-D\", mean(ajts$B, ajts$D))\n  journey_data &lt;- add_new_row(\"B-D-F-M\", mean(ajts$B, ajts$D, ajts$FF, ajts$M)) \n  journey_data &lt;- add_new_row(\"N-Q-R\", mean(ajts$N, ajts$Q, ajts$R)) \n  journey_data &lt;- add_new_row(\"N-Q\", mean(ajts$N, ajts$Q)) \n  journey_data &lt;- add_new_row(\"N-R\", mean(ajts$N, ajts$R)) \n  journey_data &lt;- add_new_row(\"F-M\", mean(ajts$FF, ajts$M)) \n  journey_data &lt;- add_new_row(\"A-C\", mean(ajts$A, ajts$C)) \n  journey_data &lt;- add_new_row(\"1-2-3\", mean(ajts$l1, ajts$l2, ajts$l3)) \n  journey_data &lt;- add_new_row(\"4-5-6\", mean(ajts$l4, ajts$l5, ajts$l6)) \n  journey_data &lt;- add_new_row(\"N-W\", mean(ajts$N, ajts$W)) \n  journey_data &lt;- add_new_row(\"2-3\", mean(ajts$l2, ajts$l3)) \n  journey_data &lt;- add_new_row(\"4-5\", mean(ajts$l4, ajts$l5))\n  journey_data &lt;- add_new_row(\"A-C-E\", mean(ajts$A, ajts$C, ajts$E)) \n  journey_data &lt;- add_new_row(\"N-Q-R-W\", mean(ajts$N, ajts$Q, ajts$R, ajts$W)) \n  journey_data &lt;- add_new_row(\"N-R-W\", mean(ajts$N, ajts$R, ajts$W))\n  journey_data &lt;- add_new_row(\"R-W\", mean(ajts$R, ajts$W))\n}\n\n\nFinally, we import shape data so we can map NYC (5 on the home page) and the subway lines (6 on the home page) properly. This geographical data is appropriately combined with the datasets we created above in order to produce the final map later.\n\n\nCode\n# Importing geo data for subway lines\nlines &lt;- st_read(\"nyc_subways/lines.shp\")\n\n# Importing geo data for the base map of NYC\n# Excluding Staten Island since there are no subway data there\nnyc &lt;- st_read(\"nyc_base_map/nyc.shp\") %&gt;% \n  filter(boro_name != \"Staten Island\")\n\n# Turning the project data into a form that can be mapped\nproj_locs &lt;- st_as_sf(project_data, coords = c(\"longitude\", \"latitude\"), \n                      crs = 4326, agr = \"constant\") %&gt;% \n  filter(date &lt;= \"2024-08-01\") %&gt;% \n  mutate(date = as.factor(date))\n\n# Combining the AJT data with the geography of the lines so it can be mapped\nline_data &lt;- lines %&gt;% \n  rename(line = name) %&gt;% \n  select(-c(url, id, objectid, rt_symbol)) %&gt;% \n  left_join(journey_data, by = \"line\") %&gt;%\n  rename(date = month) %&gt;% \n  mutate(date = as.factor(date))"
  },
  {
    "objectID": "eda.html#mapping",
    "href": "eda.html#mapping",
    "title": "Code for Map Creation",
    "section": "Mapping",
    "text": "Mapping\nNow we use the tmap package to create the final map.\n\n\nCode\n# Renaming variables in each dataset to format the map legend correctly\nline_data_clean &lt;- line_data %&gt;% \n  rename(`Additional journey time (mins)` = ajt)\n\nproj_locs_clean &lt;- proj_locs %&gt;% \n  mutate(category_description = str_to_title(category_description)) %&gt;% \n  rename(`% of project left` = project_left,\n         `Type of improvement` = category_description)\n\n# Making sure our final .gif includes all the frames\ntmap_options(facet.max = 200)\n\n# Creating the map\nurb_anim &lt;- tm_shape(nyc) + \n  # NYC base map\n  tm_polygons(fill = \"white\") + \n  # Subway lines, colored by AJT\n  tm_shape(line_data_clean) +\n  tm_lines(col = \"Additional journey time (mins)\", lwd = 3.5, palette = \"heat\") +\n  tm_scale_intervals(style = \"pretty\") +\n  tm_facets_wrap(by = \"date\",\n                 nrow = 1, ncol = 1) +\n  # Capital projects, colored by type, sized by completion\n  tm_shape(proj_locs_clean) + \n  tm_symbols(fill = \"Type of improvement\", \n             size = \"% of project left\",\n             fill_alpha = 0.5, col_alpha = 0) +\n  tm_polygons() + \n  tm_facets_wrap(by = \"date\",\n                 nrow = 1, ncol = 1) +\n  # Legend features\n  tm_layout(legend.outside = TRUE, \n            legend.outside.position = 'bottom',\n            legend.title.fontface = 'bold')\n\n# Save the gif (commented out to not overwrite current gif)\n# tmap_animation(urb_anim, filename = \"urb_anim.gif\", delay = 27)"
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "Code for Map Creation",
    "section": "",
    "text": "This page shows all the code written to create the map .gif on the home page, along with descriptions of how the data are processed and used. You can click on the play buttons that say “Code” to show the code. All raw files and version control can be found in the public Github repo linked in the top right corner."
  }
]