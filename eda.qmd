---
title: "Code for Map Creation"
format: 
  html:
    code-fold: true
    toc: true
---

```{css, echo = FALSE}
.basic {
  border: 3px solid lightblue;
}
```

```{r, echo = FALSE}
knitr::opts_chunk$set(class.source = "basic")
```

This page shows all the code written to create the map `.gif` on the home page, along with descriptions of how the data are processed and used. You can click on the play buttons that say "Code" to show the code. All raw files and version control can be found in the public Github repo linked in the top right corner.

## Loading libraries

These are the libraries needed to run the code.

```{r, warning = FALSE, message = FALSE}

library(tidyverse)
library(janitor)
library(sf)
library(terra)
library(spData)
library(spDataLarge)
library(tmap)
library(leaflet)
library(knitr)
library(lubridate)
```

## Loading data

We combine 4 data sets to create the points and lines on the final map. The first two datasets (1 & 2 on the home page) provide information on capital (infrastructure investment) projects. We combine these two datasets so that we know the timeline, location, and type of each project (e.g., passenger station upgrades, signals & communication updates). Some types of projects are excluded if they don't directly affect subway transport, and some categories are combined for simplicity.

The second two datasets (3 & 4 on the home page) provide information on additional journey time (AJT) for each subway line for each month. The AJT denotes the average additional time in minutes, over the scheduled time, that customers spend onboard and waiting for a train. These datasets are stratified by year. One contains data from 2015-2019, and the other from 2020 on, so they need to be combined. 


```{r, warning = FALSE, message = FALSE}

# Loading data for the project locations
location <- read_csv("data/project_locations.csv") %>% clean_names()

# Loading data for the project summaries, which show project progress
summary <- read_csv("data/project_summary.csv") %>% 
  clean_names() %>% 
  select(-c("agency_name", "category_description", 
            "element_description", "project_description",
            "location_indicator", "capital_plan"))

# Joining the project location and progress data and simplifying the categories
project_data <- location %>% 
  left_join(summary, by = "project_number") %>% 
  filter(current_quarter_flag == "CQ") %>% 
  filter(agency_name == "New York City Transit") %>% 
  mutate(category_description = 
           case_when(category_description %in% 
                       c("SIGNALS & COMMUNICATIONS",
                         "SIGNALS AND COMMUNICATIONS") ~ 
                       "SIGNALS & COMMUNICATION",
                     category_description %in% c("MISC./EMERGENCY", "MISCELLANEOUS")  ~ 
                       "MISCELLANEOUS/EMERGENCY",
                     category_description %in% c("SHOPS AND YARDS", "YARDS") ~
                       "SHOPS & YARDS",
                     category_description %in% c("TRACTION POWER", "POWER") ~ "POWER/TRACTION POWER",
                     TRUE ~ category_description)
  ) %>% 
  filter(!category_description %in% c("DEPOTS", 
                                      "BUSES", 
                                      "SHOPS & YARDS"))

# Loading the journey data from all years
journey_data1 <- read_csv("data/journey_time.csv")
journey_data2 <- read_csv("data/journey_time_2020.csv")

# Combining the journey data and simplifying to later join with geographic data
journey_data <- rbind(journey_data1, journey_data2) %>% 
  clean_names() %>% 
  filter(period == "peak") %>% 
  select(-period) %>% 
  filter(line != "Systemwide") %>% 
  mutate(line = case_when(line %in% c("S Fkln", "S Rock", "S 42nd") ~ "S",
                          line == "JZ" ~ "J-Z",
                          TRUE ~ line)) %>% 
  mutate(ajt = additional_platform_time + additional_train_time) %>% 
  select(month, line, ajt) %>% 
  mutate(month = as.character(month))
```

Now we have two datasets: one for projects (circles on the map) and one for AJT per line (lines on the map). However, we have to do some data manipulation.

For the `projects` dataset, we have to edit it so that it includes entries for each project for each year and month, along with the completion percentage of the project, which we estimate to be linear over time from the start date to the end date listed in the dataset.

For the `AJT` dataset, we already have an entry for each line for each month of the year, but in order to mesh it properly with the geographical data, we have to make sure the line names correspond, and therefore have to average some data over multiple lines. For example, the geographical dataset for the subway lines has an "A-C-E" entry, while the AJT dataset only has data on the individual A, C, and E lines. Therefore the "line" on the map that represents the A-C-E is an average of the AJT for each individual line.

The methods to complete both of these tasks are shown in the code chunk below.

```{r, warning = FALSE, message = FALSE}

# Reformatting the date variable here to make the iteration easier
project_data <- project_data %>% 
  mutate(project_id = paste(project_number, project_number_sequence, sep = "")) %>%
  filter(!is.na(current_start_year), !is.na(current_completion_year)) %>% 
  mutate(current_start_month = if_else(is.na(current_start_month), 
                                       01, 
                                       current_start_month),
         current_completion_month = if_else(is.na(current_completion_month),
                                            01,
                                            current_completion_month)) %>% 
  mutate(start_date = as.Date(paste(current_start_year, 
                                           current_start_month, 
                                           01,
                                           sep = "-"), "%Y-%m-%d")) %>% 
  mutate(end_date = as.Date(paste(current_completion_year, 
                                         current_completion_month, 
                                          01,
                                  sep = "-"), "%Y-%m-%d")) %>% 
  mutate(date = start_date,
         project_left = 100) %>% 
  # Starting in 2015 because this is where the AJT data starts
  filter(start_date > "2014-12-01") %>% 
  select(project_id, category_description, latitude, longitude, location,
         start_date, end_date, date, project_left)

# Beginning the iteration to add the proper additional rows to the dataset
for (i in unique(project_data$project_id)) {
  curr_row_num <- which(project_data$project_id == i)
  curr_row <- project_data[curr_row_num,]
  # Getting number of months the project is active
  start <- project_data$start_date[curr_row_num]
  end <- project_data$end_date[curr_row_num]
  num_months <- interval(start, end) %/% months(1)
  # Adding extra rows for each month, with completetion % estimate
  if(num_months > 0) {
    rate <- 100/num_months
    for (j in 1:num_months) {
      curr_row$date <- start %m+% months(j)
      curr_row$project_left <- if_else(j == num_months,
                                     0,
                                     (num_months - j)*rate)
      project_data[nrow(project_data) + 1,] = curr_row
    }
  }
}


dates <- as.character(seq(as.Date("2015-01-01"), as.Date("2024-08-01"), by="months"))

# Averaging out certain lines so AJT data corresponds to the line geo data
grab_ajt <- function(line_name, date) {
  
  ajt <- journey_data %>% 
    filter(month == date) %>% 
    filter(line == line_name) %>% 
    pull(ajt)
  
  if (length(ajt) == 0) {
    ajt <- 0
  }
  
  return(ajt)
}

add_new_row <- function(line_combo, ajt_val) {
  journey_data %>% 
    add_row(month = date,
            line = line_combo,
            ajt = ajt_val)
}

for (date in dates) {
  
  ajts <- map(.x = list(B = "B", D = "D", FF = "F", M = "M", N = "N", Q = "Q", 
                   R = "R", A = "A", C = "C", W = "W", E = "E", l1 = "1",
                   l2 = "2", l3 = "3", l4 = "4", l5 = "5", l6 = "6"), 
              .f = grab_ajt,
              date)
  
  journey_data <- add_new_row("B-D", mean(ajts$B, ajts$D))
  journey_data <- add_new_row("B-D-F-M", mean(ajts$B, ajts$D, ajts$FF, ajts$M)) 
  journey_data <- add_new_row("N-Q-R", mean(ajts$N, ajts$Q, ajts$R)) 
  journey_data <- add_new_row("N-Q", mean(ajts$N, ajts$Q)) 
  journey_data <- add_new_row("N-R", mean(ajts$N, ajts$R)) 
  journey_data <- add_new_row("F-M", mean(ajts$FF, ajts$M)) 
  journey_data <- add_new_row("A-C", mean(ajts$A, ajts$C)) 
  journey_data <- add_new_row("1-2-3", mean(ajts$l1, ajts$l2, ajts$l3)) 
  journey_data <- add_new_row("4-5-6", mean(ajts$l4, ajts$l5, ajts$l6)) 
  journey_data <- add_new_row("N-W", mean(ajts$N, ajts$W)) 
  journey_data <- add_new_row("2-3", mean(ajts$l2, ajts$l3)) 
  journey_data <- add_new_row("4-5", mean(ajts$l4, ajts$l5))
  journey_data <- add_new_row("A-C-E", mean(ajts$A, ajts$C, ajts$E)) 
  journey_data <- add_new_row("N-Q-R-W", mean(ajts$N, ajts$Q, ajts$R, ajts$W)) 
  journey_data <- add_new_row("N-R-W", mean(ajts$N, ajts$R, ajts$W))
  journey_data <- add_new_row("R-W", mean(ajts$R, ajts$W))
}
```

Finally, we import shape data so we can map NYC (5 on the home page) and the subway lines (6 on the home page) properly. This geographical data is appropriately combined with the datasets we created above in order to produce the final map later.

```{r, warning = FALSE, message = FALSE, eval = FALSE}

# Importing geo data for subway lines
lines <- st_read("nyc_subways/lines.shp")

# Importing geo data for the base map of NYC
# Excluding Staten Island since there are no subway data there
nyc <- st_read("nyc_base_map/nyc.shp") %>% 
  filter(boro_name != "Staten Island")

# Turning the project data into a form that can be mapped
proj_locs <- st_as_sf(project_data, coords = c("longitude", "latitude"), 
                      crs = 4326, agr = "constant") %>% 
  filter(date <= "2024-08-01") %>% 
  mutate(date = as.factor(date))

# Combining the AJT data with the geography of the lines so it can be mapped
line_data <- lines %>% 
  rename(line = name) %>% 
  select(-c(url, id, objectid, rt_symbol)) %>% 
  left_join(journey_data, by = "line") %>%
  rename(date = month) %>% 
  mutate(date = as.factor(date))
```

## Mapping

Now we use the `tmap` package to create the final map.

```{r, warning = FALSE, message = FALSE, eval = FALSE}

# Renaming variables in each dataset to format the map legend correctly
line_data_clean <- line_data %>% 
  rename(`Additional journey time (mins)` = ajt)

proj_locs_clean <- proj_locs %>% 
  mutate(category_description = str_to_title(category_description)) %>% 
  rename(`% of project left` = project_left,
         `Type of improvement` = category_description)

# Making sure our final .gif includes all the frames
tmap_options(facet.max = 200)

# Creating the map
urb_anim <- tm_shape(nyc) + 
  # NYC base map
  tm_polygons(fill = "white") + 
  # Subway lines, colored by AJT
  tm_shape(line_data_clean) +
  tm_lines(col = "Additional journey time (mins)", lwd = 3.5, palette = "heat") +
  tm_scale_intervals(style = "pretty") +
  tm_facets_wrap(by = "date",
                 nrow = 1, ncol = 1) +
  # Capital projects, colored by type, sized by completion
  tm_shape(proj_locs_clean) + 
  tm_symbols(fill = "Type of improvement", 
             size = "% of project left",
             fill_alpha = 0.5, col_alpha = 0) +
  tm_polygons() + 
  tm_facets_wrap(by = "date",
                 nrow = 1, ncol = 1) +
  # Legend features
  tm_layout(legend.outside = TRUE, 
            legend.outside.position = 'bottom',
            legend.title.fontface = 'bold')

# Save the gif (commented out to not overwrite current gif)
# tmap_animation(urb_anim, filename = "urb_anim.gif", delay = 27)
```

